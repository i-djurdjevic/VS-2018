/* elfutils::dwarf_ref_maker -- -*- C++ -*- template type specification
   Copyright (C) 2009-2010 Red Hat, Inc.
   This file is part of Red Hat elfutils.

   Red Hat elfutils is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by the
   Free Software Foundation; version 2 of the License.

   Red Hat elfutils is distributed in the hope that it will be useful, but
   WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   General Public License for more details.

   You should have received a copy of the GNU General Public License along
   with Red Hat elfutils; if not, write to the Free Software Foundation,
   Inc., 51 Franklin Street, Fifth Floor, Boston MA 02110-1301 USA.

   In addition, as a special exception, Red Hat, Inc. gives You the
   additional right to link the code of Red Hat elfutils with code licensed
   under any Open Source Initiative certified open source license
   (http://www.opensource.org/licenses/index.php) which requires the
   distribution of source code with any binary distribution and to
   distribute linked combinations of the two.  Non-GPL Code permitted under
   this exception must only link to the code of Red Hat elfutils through
   those well defined interfaces identified in the file named EXCEPTION
   found in the source code files (the "Approved Interfaces").  The files
   of Non-GPL Code may instantiate templates or use macros or inline
   functions from the Approved Interfaces without causing the resulting
   work to be covered by the GNU General Public License.  Only Red Hat,
   Inc. may make changes or additions to the list of Approved Interfaces.
   Red Hat's grant of this exception is conditioned upon your not adding
   any new exceptions.  If you wish to add a new Approved Interface or
   exception, please contact Red Hat.  You must obey the GNU General Public
   License in all respects for all of the Red Hat elfutils code and other
   code used in conjunction with Red Hat elfutils except the Non-GPL Code
   covered by this exception.  If you modify this file, you may extend this
   exception to your version of the file, but you are not obligated to do
   so.  If you do not wish to provide this exception without modification,
   you must delete this exception statement from your version and license
   this file solely under the GPL without exception.

   Red Hat elfutils is an included package of the Open Invention Network.
   An included package of the Open Invention Network is a package for which
   Open Invention Network licensees cross-license their patents.  No patent
   license is granted, either expressly or impliedly, by designation as an
   included package.  Should you wish to participate in the Open Invention
   Network licensing program, please visit www.openinventionnetwork.com
   <http://www.openinventionnetwork.com>.  */

#ifndef _ELFUTILS_DWARF_REF_MAKER
#define _ELFUTILS_DWARF_REF_MAKER	1

#include "dwarf"
#include <tr1/unordered_map>
#include <vector>

namespace elfutils
{
  // Prototypical stub for reference maker object.
  // This keeps no state and can't really be used.
  template<class output, class input>
  struct dwarf_ref_maker_base
  {
    typedef typename input::debug_info_entry input_entry;
    typedef typename input_entry::children_type::const_iterator input_ref;
    typedef typename output::debug_info_entry::pointer output_ref;

    // These are called around a whole-file construction.
    inline void start () {}

    // If called, all pointers passed in since start () before are bogus.
    inline void abort () {}

    // Construction is complete: now snap in all recorded references.
    inline void finish (output &file) {}

    // The referenced output DIE has been constructed to match the input DIE.
    inline void equivalence (const output_ref &to, const input_ref &from)
    {
    }

    // *REF is an uninitialized attr_value.reference ().
    // It's meant to refer to the output DIE equivalent to the given input DIE.
    inline void refer (output_ref *ref, const input_ref &target)
    {
      throw std::logic_error ("dwarf_ref_maker_base cannot make references");
    }
  };

  // Simple maker used for a single copy-construction.
  template<class output, class input>
  class dwarf_ref_maker : public dwarf_ref_maker_base<output, input>
  {
  public:
    typedef typename input::debug_info_entry input_entry;
    typedef typename output::debug_info_entry output_entry;
    typedef typename input_entry::children_type::const_iterator input_ref;
    typedef typename output_entry::children_type::iterator output_ref;

  private:

    struct seen
    {
      bool _m_known;
      output_ref _m_out;
      std::vector<output_ref *> _m_refs;

      inline seen ()
	: _m_known (false), _m_out (), _m_refs ()
      {}

      // Copy construction only valid for initial state.
      inline seen (const seen &other)
	: _m_known (false), _m_out (), _m_refs ()
      {
	if (unlikely (other._m_known) || unlikely (!other._m_refs.empty ()))
	  throw std::logic_error
	    ("seen copy constructs only from default-constructed");
      }

      inline void resolve ()
      {
	for (; !_m_refs.empty (); _m_refs.pop_back ())
	  *_m_refs.back () = _m_out;
      }

      inline void resolve (const output_ref &to)
      {
	_m_out = to;
	_m_known = true;
	resolve ();
      }

      inline void refer (output_ref *out)
      {
	_m_refs.push_back (out);
	if (_m_known)
	  resolve ();
      }
    };

    std::tr1::unordered_map<dwarf::debug_info_entry::identity_type,
			    seen> _m_map;

  public:
    inline dwarf_ref_maker ()
      : _m_map ()
    {}

    inline dwarf_ref_maker (const dwarf_ref_maker &other)
      : _m_map ()
    {
      if (unlikely (!other._m_map.empty ()))
	throw std::logic_error
	  ("dwarf_ref_maker copy constructs only from default-constructed");
    }

    inline ~dwarf_ref_maker ()
    {}

    inline void abort ()
    {
      _m_map.clear ();
    }

    inline void equivalence (const output_ref &out, const input_ref &in)
    {
      _m_map[in->identity ()].resolve (out);
    }

    inline void refer (output_ref *out, const input_ref &in)
    {
      _m_map[in->identity ()].refer (out);
    }

    inline void finish (output &file)
    {
      while (_m_map.begin () != _m_map.end ())
	if (_m_map.begin ()->second._m_known)
	  _m_map.erase (_m_map.begin ());
	else
	  throw std::logic_error ("construction finished with unresolved refs");
    }
  };

};

#endif	// <elfutils/dwarf_ref_maker>
